Con setwd("") abrimos el archivo en R. Cambiamos las "\" por "/" debido a que R no lee las backlashes "\"
Con getwd() te manda en donde está ubicado la consola 
Con dir() te dice que archivo se encuentra en la ubicación  

#Este simbolo sirve oara hacer comentarios en R

#Para leer el archivo que se encuentra en la ubicación dada en setwd, escribimos lo siguiente

read.csv("Maraton_NY.csv",header="TRUE",row.names=1)

#el primer parámetro del comando "read.csv()" indica el nombre del archivo
#el segundo parámetro del comando indica que el documento (en esta caso la tabla a leer) tiene encabezados
#el tercer parámetro del comando indica que los nombres o especificadores de la tabla se encuentran en la columna 1, el numero de columna varía de acuerdo a cada tabla

#existen otros parámetros que se le pueden asignar a la función "read.csv" como son los siguientes

#sep="," indica que los separadores entre columnas son comas
#dec="." indica que el separador de decimales es un punto

maraton <- read.csv("Maraton_NY.csv",header=TRUE,row.names=1)

View(maraton)

#Existen otros comandos que nos ayudan a sacar información de la tabla que estamos tratando

head(maraton,10) #imprime las primeras 10 filas de la tabla,el numero de filas uno lo escoge, si no escribes dicho numero te saca 6 filas por default
str(maraton) #desglosa el tipo de dato que representa cada variable en la tabla
dim(maraton) #indica el numero de filas y columnas que tiene tu tabla
names(maraton) #te da los nombres de las variables en tu tabla

### Manipulación de filas y columnas ###
#Podemos imprimir de nuestra tabla original subtablas de acuerdo a las filas y columnas que queramos apreciar
maraton[,c(2,3,5)] #subtabla que muestra todas las filas y las columnas 2,3 y 5
maraton[c(38:40,42), ] # subtabla que muestra de las filas 38 a 40 y la 42, todas las columnas

subtabla1 <- maraton[c(1:10),c(2,3)] 
dim(subtabla1)

subtabla2 <- t(subtabla1) #La función t() traspone la tabla que se le dé

##### Filtros para accceder a las tablas ####


maraton_tabla_1 <- maraton[maraton$age>30, ] #Esta tabla imprime la subtabla con las edades de los atletas que son mayores a 30 años
View(maraton_tabla_1)
#Negacion
maraton_tabla_2 <- maraton[!(maraton$age>30), ] #Esta tabla imprime la subtabla con las edades de los atletas que son menores 30 años
View(maraton_tabla_2)
#Conjunción
maraton_tabla_3 <- maraton[(maraton$home %in% c("MEX","ARG") & maraton$age>30),] #Aqui aplicamos el comando %in% que selecciona la nacionalidad del corredor y aplicamos una conjuncion para que dichos atletas sean mayores a 30 
View(maraton_tabla_3)
#Disjunción
maraton_tabla_4 <- maraton[(maraton$gender=="Male" | maraton$age<30),] #Con que los atletas sean hombres o seam menores a 30 se cumple la condición
View(maraton_tabla_4)

dim(maraton[(maraton$gender=="Male" | maraton$age<30),])

##### Categorización ######
#La categorización es la división de la información numérica para formar nuevos grupos de información

#Aqui crea una nueva categoria a la tabla y le llama categoria donde se divide en 3 partes la columna de tiempo
maraton$categoria <- cut(maraton$time,breaks=3,labels=c("alto","medio","bajo"))
View(maraton)

#También se puede dividir la columna en intervalos que nosotros creemos

intervalos <- c(min(maraton$time)-1,100,200,300,400,max(maraton$time+1))
maraton$categoria2 <- cut(maraton$time,breaks=intervalos,labels=c("c1","c2","c3","c4","c5"))

View(maraton)
#La función summary nos presenta la cantidad de objetos de la tabla que caen en cada intervalo de la nueva categoría
summary(maraton$categoria2)
#Ahora con la función which podemos localizar la posicion en la tabla en la que se encuentra un objeto caracterizado ya sea porque sea maximo o minimo de una columa

min(maraton$time) #Me da el valor mínimo de la columna tiempo de maratón
which.min(maraton$time) #me dice en qué posición está el minimo
maraton[which.min(maraton$time),] #me entrega los datos de fila en la que se encuentra el minimoy los valores de todas sus columnas

dir()
###################3 Ahora vamos a leer otra tabla ########################
contaminacion <- read.csv("contaminacion.csv",header=TRUE)
View(contaminacion)
 #Instalamos la nueva librería
install.packages("mice")
library(mice)

md.pattern(contaminacion) #Este comando nos permite visualizar la tabla de valores

conta0 <- contaminacion[-33,] #Le quitamos la fila 33 a la tabla porque tiene más NA y no nos interesa

md.pattern(conta0) #Mostramos la tabla que ya no tiene la fila 33
View(conta0)

is.na(conta0$CN) # Le pedimos que nos de los valores de true o false de acuerdo a si el numero de fila de la columna  CN es NA

conta0
complete.cases(conta0) #Complete cases nos dice si es verdad o falso que en la fila de la tabla exista al menos un NA

#Algo análogo a esto es la funcion na.omit(conta0)

na.omit(conta0)
md.pattern(na.omit(conta0))

######### Ahora vamos con el tratamiento de los NA ###################

mean(conta0$Numero_de_empresas) # En este caso la columna Numero_de_empresas no tiene NA por eso es facil calcular su promedio
#Veamos una fila que tiene #NA

mean(conta0$CN)

#Nos arroja NA y esto es debido a la aritmetica del NA
#NA+numero=NA // NA*numero=NA // NA/numero=NA

#Para que la operacion no considere los NA es necesario aplicar la función na.rm=TRUE

mean(conta0$CN,na.rm=TRUE)

#Ahora, si queremos que en donde haya NA se ponga el valor promedio de la columna ocupamos la siguiente función
#Construimos una nueva columna llamada CN_medias
conta0$CN_medias <- ifelse(is.na(conta0$CN),mean(conta0$CN,na.rm=TRUE),conta0$CN)
#Es decir, "ifelse" dice que en donde haya valores NA (is.na(conta0$CN)) coloque el promedio de la columna quitando los NA (mean(conta0$CN,na.rm=TRUE)) 
# y en dado caso de que no haya NA pone el valor que de por si va ahí (conta0$CN)
conta0

#Ahora, ¿qué pasa si no estamos trabajando con números?
#Creamos una tabla nueva llamada B
B <- data.frame(V1 = c("a","b","c","d","e"),V2 = c("practica","hola","hola",NA,"adios"))
B

#Instalamos el paquete que trae la moda
install.packages("modeest")
library(modeest)
#Volvemos a utilizar la función ifelse pero ahora aplicando mfv
B$V2_modas <- ifelse(is.na(B$V2),mfv(B$V2,na_rm=TRUE),B$V2)
#Es decir, "ifelse" dice que en donde haya valores NA (is.na(B$V2)) coloque la moda de la columna quitando los NA (mfv(B$V2,na_rm=TRUE)) 
# y en dado caso de que no haya NA pone el valor que de por si va ahí (B$V2N)
B

summary(factor(B$V2))
summary(factor(c("a","b","c")))

#Ahora veamos otro método para eliminar los NA
#Instalamos otra librería 
#Otro método de reemplazo es el Método de los k-vecinos. Con este método, se imputa los valores de los atributos que faltan en base al vecino K más cercano. 
#Los vecinos se determinan en base a la medida de la distancia. Una vez que se determinan los K vecinos, los valores faltantes son imputados tomando la media/mediana o moda de los valores conocidos del atributo.

install.packages("DMwR")
library(DMwR)


conta0
conta1 <- knnImputation(conta0)

#############
#Mandamos a llamar a la lista #rivers la cual es una lista de los rios mas grandes de estados unidos
rivers
help(rivers)
#Mostramos el gráfico de caja en forma horizontal
boxplot(rivers,horizontal=TRUE)
#Hallamos los valores relevantes como media, primer cuartil, segundo cuartil, etc, por medio de la función stats

boxplot.stats(rivers)$out

View(rivers)

rivers[rivers %in% as.vector(boxplot.stats(rivers)$out)]

rivers_data <- data.frame(rivers)

rivers_data[rivers_data[,1] %in% as.vector(boxplot.stats(rivers_data[,1])$out),]

#boxplot nos arroja una gráfica de caja
help(boxplot)
boxplot(rivers,horizontal=TRUE)
boxplot.stats(rivers)
#Aqui pido que solo me arroje la lista de out que está en stats
boxplot.stats(rivers)$out

#Para trabajar más facilmente con la tabla rivers la transformamos a data.frame
rivers_data <- data.frame(rivers)

#Ahora hallamos el valor minimo de los valores atípicos de la grafica boxplot
minimo1 <- min(boxplot.stats(rivers)$out)

#Ahora creamos la tabla que me quita los valores atípicos a través de la condición
rivers1 <- rivers[rivers<minimo1]
View(rivers1)
boxplot(rivers1,horizontal=TRUE)

#En la grafica aparecen 3 nuevos atípicos porque al quitar los atipicos originales se vuelven
#a calcular nuevas stats y se generan nuevos atípicos

#Volvemos a hacer este procedimiento hasta que se quiten los atípicos
minimo2 <- min(boxplot.stats(rivers1)$out)
rivers2 <- rivers1[rivers1<minimo2]
boxplot(rivers2,horizontal=TRUE)

#Aún hay un atípico, entonces repetimos el procedimiento
minimo3 <- min(boxplot.stats(rivers2)$out)
rivers3 <- rivers2[rivers2<minimo3]
boxplot(rivers3,horizontal=TRUE)

#Ahora si ya no hay atípicos, sin embargo, esta práctica no es tan factible al analizar datos
#Para hacerlo correctamente, tomamos el maximo y vamos eliminando los atípicos  de 1 en 1
rivers_1 <- rivers[rivers<max(boxplot.stats(rivers)$out)]
boxplot(rivers_1,horizontal=TRUE)

rivers_2 <- rivers_1[rivers_1<max(boxplot.stats(rivers_1)$out)]
boxplot(rivers_2,horizontal=TRUE)


boxplot(maraton)
boxplot(maraton[,c(3,5)])


install.packages("scales")
library(scales)

View(rescale(maraton$age))

### El reescalamiento de valores consiste en tomar cada valor x y aplicar la 
### fórmula (x-x_min)/(x_max-x_min)

min(maraton$age)
max(maraton$age)

(maraton$age-min(maraton$age))/(max(maraton$age)-min(maraton$age))

### La normalización de valores consiste en tomar cada valor x y aplicar la
### fórmula (x-media)/desv

reescalado <- sapply(maraton[,c(3,5)],rescale)

View(reescalado)

boxplot(reescalado)

#lapply returns a list of the same length as X, each element of which is the result
#of applying FUN to the corresponding element of X.

#sapply is a user-friendly version and wrapper of lapply by default returning a vector,
#matrix or, if simplify = "array", an array if appropriate, by applying simplify2array().
#sapply(x, f, simplify = FALSE, USE.NAMES = FALSE) is the same as lapply(x, f).
#

lista_graficas <- lapply(maraton[,c(3,5)],graficador)

lista_graficas[[2]]

###### Ordenamiento #############
#La función sort ordena una lista de menor a mayor
sort(maraton$place)
#La función order pone los índices de los numeros de la tabla de menor a mayor
order(maraton$place)
View(maraton)

maraton[order(maraton$place),]
View(maraton[order(maraton$time),])

#Pidamos ver quienes son los 3 peruanos más rápido de la tabla
#Creamos la subtabla que contiene a todos los peruanos
summary(maraton$home)
peruanos <- maraton[maraton$home=="PER",]

View(peruanos)
#Ordenamos la columna lugar de la tabla peruanos
peruanos[order(peruanos$place),]
#Elegimos los primeros 3
peruanos[order(peruanos$place),][1:3,]

#Ahora veamos el orden descendente en la ordenación de los datos

A <- data.frame(V1=c("a","b","a","c"),V2=c(5,3,2,1))

#orden ascendente
A[order(A$V1,A$V2),]
#orden descendente
A[order(A$V1,-A$V2),]
#otra forma de poner en orden descendente columnas que no son numéricas es la siguiente
A[order(A$V1,A$V2,decreasing = c("TRUE","FALSE")),]
#La funcion tapply lo que hace es reunir los atributos de una columna a través de una funcion, en este caso, la suma
tapply(A$V2,A$V1,mean) 
